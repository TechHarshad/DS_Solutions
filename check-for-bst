GFG Problem : https://practice.geeksforgeeks.org/problems/check-for-bst

Problem:

Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.


Solution:

public class Solution
{
    
    boolean checkBst(Node node, int min, int max){
        if(node == null) return true;
        if(node.data > max || node.data < min) return false;
        
        return checkBst(node.left, min, node.data) && checkBst(node.right, node.data, max);
    }
    
    //Function to check whether a Binary Tree is BST or not.
    boolean isBST(Node root)
    {
        // code here.
        if(root == null) return false;
        
        return checkBst(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
}
