GFB Problem : https://practice.geeksforgeeks.org/problems/check-for-balanced-tree

Problem:

Given a binary tree, find if it is height balanced or not. 
A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 

Solution:

class Tree
{
    int height = 0;
    //Function to check whether a binary tree is balanced or not.
    boolean isBalanced(Node root)
    {
	// Your code here
	    if(root == null){
	        height = 0;
	        return true;
	    }
	    
	    height = 0;
	    boolean isLeftBalanced = isBalanced(root.left);
	    int leftHeight = height;
	    
	    height = 0;
	    boolean isRightBalanced = isBalanced(root.right);
	    int rightHeight = height;
	    
	    height = Math.max(leftHeight, rightHeight) + 1;
	    
	    return isLeftBalanced && isRightBalanced && (Math.abs(leftHeight - rightHeight) <= 1);
    }
}
